// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: student.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	AddStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	AddStudentVerbose(ctx context.Context, in *Student, opts ...grpc.CallOption) (StudentService_AddStudentVerboseClient, error)
	AddStudents(ctx context.Context, opts ...grpc.CallOption) (StudentService_AddStudentsClient, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) AddStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/protos.StudentService/AddStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) AddStudentVerbose(ctx context.Context, in *Student, opts ...grpc.CallOption) (StudentService_AddStudentVerboseClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[0], "/protos.StudentService/AddStudentVerbose", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceAddStudentVerboseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudentService_AddStudentVerboseClient interface {
	Recv() (*StudentResultStream, error)
	grpc.ClientStream
}

type studentServiceAddStudentVerboseClient struct {
	grpc.ClientStream
}

func (x *studentServiceAddStudentVerboseClient) Recv() (*StudentResultStream, error) {
	m := new(StudentResultStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) AddStudents(ctx context.Context, opts ...grpc.CallOption) (StudentService_AddStudentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentService_ServiceDesc.Streams[1], "/protos.StudentService/AddStudents", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceAddStudentsClient{stream}
	return x, nil
}

type StudentService_AddStudentsClient interface {
	Send(*Student) error
	CloseAndRecv() (*Students, error)
	grpc.ClientStream
}

type studentServiceAddStudentsClient struct {
	grpc.ClientStream
}

func (x *studentServiceAddStudentsClient) Send(m *Student) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceAddStudentsClient) CloseAndRecv() (*Students, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Students)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations must embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	AddStudent(context.Context, *Student) (*Student, error)
	AddStudentVerbose(*Student, StudentService_AddStudentVerboseServer) error
	AddStudents(StudentService_AddStudentsServer) error
	mustEmbedUnimplementedStudentServiceServer()
}

// UnimplementedStudentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) AddStudent(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedStudentServiceServer) AddStudentVerbose(*Student, StudentService_AddStudentVerboseServer) error {
	return status.Errorf(codes.Unimplemented, "method AddStudentVerbose not implemented")
}
func (UnimplementedStudentServiceServer) AddStudents(StudentService_AddStudentsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddStudents not implemented")
}
func (UnimplementedStudentServiceServer) mustEmbedUnimplementedStudentServiceServer() {}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.StudentService/AddStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).AddStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_AddStudentVerbose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Student)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentServiceServer).AddStudentVerbose(m, &studentServiceAddStudentVerboseServer{stream})
}

type StudentService_AddStudentVerboseServer interface {
	Send(*StudentResultStream) error
	grpc.ServerStream
}

type studentServiceAddStudentVerboseServer struct {
	grpc.ServerStream
}

func (x *studentServiceAddStudentVerboseServer) Send(m *StudentResultStream) error {
	return x.ServerStream.SendMsg(m)
}

func _StudentService_AddStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).AddStudents(&studentServiceAddStudentsServer{stream})
}

type StudentService_AddStudentsServer interface {
	SendAndClose(*Students) error
	Recv() (*Student, error)
	grpc.ServerStream
}

type studentServiceAddStudentsServer struct {
	grpc.ServerStream
}

func (x *studentServiceAddStudentsServer) SendAndClose(m *Students) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceAddStudentsServer) Recv() (*Student, error) {
	m := new(Student)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStudent",
			Handler:    _StudentService_AddStudent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddStudentVerbose",
			Handler:       _StudentService_AddStudentVerbose_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddStudents",
			Handler:       _StudentService_AddStudents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "student.proto",
}
